name: Build and Deploy Code

on: [push, pull_request]

jobs:
    Installation:
        environment:
            name: testing
        env:
            DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
            DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
            DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
            DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
            DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
            SECRET_KEY: ${{ secrets.SECRET_KEY }}
            ALGORITHM: ${{ secrets.ALGORITHM }}
            ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

        services:
            postgres:
                image: postgres
                env:
                    POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
                    POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
                    POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        runs-on: windows-latest  # Changed to a Linux runner

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set up Python 3.12
              uses: actions/setup-python@v2
              with:
                python-version: "3.12"

            - name: Update pip
              run: python -m pip install --upgrade pip

            - name: Install all dependencies
              run: pip install -r requirements.txt

    Test:
        runs-on: windows-latest  # Changed to a Linux runner
        needs: Installation
        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Install pytest, httpx, fastapi
              run: pip install fastapi httpx pytest

            - name: Wait for PostgreSQL to be ready
              run: |
                echo "Waiting for PostgreSQL to be ready..."
                until nc -zv ${{ secrets.DATABASE_HOSTNAME }} 5432; do
                    echo "PostgreSQL is not ready yet, retrying..."
                    sleep 1
                done
                echo "PostgreSQL is ready!"
              

            - name: Run pytest tests
              run: pytest